{"name":"FBAPI.js","body":"# Facebook Javascript SDK: Simplified\r\n\r\nFBAPI.js is a library that adds many helper functions to access the Facebook JavaScript API more easily. \r\nIt takes care of loading the Facebook Javascript SDK for you, \r\nand lets you access the API without worrying if everything is ready in the background. \r\nAPI calls and event subscribing are queued up and fired once the SDK is loaded and initialized (using promises). \r\n\r\nPlease look at the FBAPI.js [source](https://raw.github.com/joelvh/FBAPI.js/master/FBAPI.js) file to get more details. \r\nI will be working on breaking out some of the test functions into separate modules to reduce the core file size.  \r\n\r\n[Minified](https://raw.github.com/joelvh/FBAPI.js/master/FBAPI.min.js) version of FBAPI.js is 4.8KB (2.34KB gzipped). \r\nI'm continuing to reduce the file size.\r\n\r\n## Examples\r\n\r\nFBAPI.js has a \"fluid\" API and manages callbacks to make sure FB is loaded (known as \"promises\"). \r\nEach method returns a reference to FBAPI, so you can chain method calls if you like.\r\n\r\n### Load FBAPI.js and the Facebook SDK\r\n\r\nFacebook init options  \r\n\r\n     var config = {  \r\n         appId: \"1234567\"  \r\n     };  \r\n    \r\nFBAPI.js loads the Facebook SDK internally for you. \r\nNo need for adding the \"fb-root\" DIV tag required by the SDK or loading the [all.js](http://connect.facebook.net/en_US/all.js) library.  \r\n\r\n     FBAPI.init(config, function() {  \r\n         //this is a callback that fires when the Facebook SDK is loaded  \r\n     })  \r\n\r\n### Session data\r\n\r\nThe first parameter is optional and can contain a comma-separated list of permissions. \r\nThe callback parameters are the same for FBAPI.logout() and FBAPI.getLoginStatus()  \r\n\r\n      FBAPI.login(\"email,perm2,perm3\", function(status, authResponse, error) {  \r\n          //Facebook API responses are parsed into callback parameters  \r\n          if (!error) {  \r\n              //do something  \r\n          }  \r\n      })  \r\n\r\n### Get data\r\n\r\nFBAPI.js also adds helper methods for profiles, objects, and connections. \r\nFacebook API responses are broken into callback parameters.\r\n\r\n      //FBAPI.getProfile(callback) gets the data for the current user (e.g. FB.api('/me', callback))  \r\n      FBAPI.getProfile(function(data, error) {  \r\n          if (!error) {  \r\n              //do something with the data  \r\n          }  \r\n      })  \r\n  \r\n      //FBAPI.getProfile(id, callback) gets the data for the specific user (e.g. FB.api('/1234567', callback))  \r\n      .getProfile('1234567', function(data, error) {  \r\n          if (!error) {  \r\n              //do something with the data  \r\n          }  \r\n      })  \r\n  \r\n      //FBAPI.getObject(id, callback) gets the data for any object.  \r\n      //It's basically an alias to FBAPI.getProfile, but makes it easier to read when getting a page or object  \r\n      //other than a user.  \r\n      .getObject('1234567', function(data, error) {  \r\n          if (!error) {  \r\n              //do something with the data  \r\n          }  \r\n      })  \r\n  \r\n      //Batching is possible by passing an array of connections to retrieve, (which can include \"profile\" as well).  \r\n      .get([\"profile\", \"friends\", \"checkins\"], '1234567', function(results, errors) {  \r\n          //\"errors\" is an array of error responses  \r\n          if (!errors.length) {  \r\n              //\"results\" is a map of results for each connection specified  \r\n              console.log(results.profile, results.friends, results.checkins);  \r\n          }  \r\n      });  \r\n  \r\n\r\n### Binding events\r\n\r\nBinding events is done through aliases to FB.Event.subscribe() and FB.Event.unsubscribe().\r\n\r\n     FBAPI.bind(eventName, callback);  \r\n     FBAPI.unbind(eventName, callback);  \r\n\r\nOne of the things that FBAPI.js does is create helper methods to subscribe to events.  They mimic \r\nthe original event name, except for the \"auth\" events are not prefixed with \"auth\".\r\n\r\n      FBAPI.onStatusChange(function(response) {   \r\n          //handle response for \"auth.statusChange\" event  \r\n      })  \r\n      .onCommentCreate(function() {  \r\n          //handle response for \"comment.create\" event  \r\n      })  \r\n  \r\n### FQL queries\r\n\r\nFQL queries can be done individually or as a batch.\r\n\r\nThe second parameter \"params\" is not required.  The callback receives the results. \r\nIt is possible to get the watchable object back instead of executing the query \r\nby passing a boolean value of \"true\" as the fourth parameter.\r\n\r\n     //The second parameter can be a single param to the query, or an array of value\r\n     FBAPI.query(\"SELECT birthday FROM user WHERE uid = {0}\", \"me()\", function(results) {  \r\n         //do something with results  \r\n     });  \r\n\r\nBatching queries requires a named map.  The \"params\" property is not required. \r\nIt is possible to get the watchable object back instead of executing the query \r\nby passing a boolean value of \"true\" as the third parameter.\r\n\r\n     var queries = {  \r\n         \"friends\": {  \r\n             query: \"SELECT name FROM friend WHERE uid1 = {0}\",  \r\n             params: [\"me()\"]  \r\n         },  \r\n         \"checkins\": {  \r\n             query: \"SELECT coords FROM checkin WHERE author_id = {0}\",  \r\n             params: [\"me()\"]  \r\n         },  \r\n     };  \r\n     FBAPI.query(queries, function(resultMap) {  \r\n         //do something with the data  \r\n         console.log(resultMap.friends, resultMap.checkins);  \r\n     });  \r\n\r\nIt is possible to nest queries in params, either as single values or in an array of params.  \r\n\r\n     var query = \"SELECT name FROM friend WHERE uid1 IN {0}\";  \r\n     var params = {  \r\n         query: \"SELECT coords FROM checkin WHERE author_id = {0}\",  \r\n         params: \"me()\" \r\n     };  \r\n     FBAPI.query(query, params, function(resultMap) {  \r\n         //do something with the data  \r\n         console.log(resultMap.friends, resultMap.checkins);  \r\n     });  \r\n\r\n#### Debugging queries\r\n\r\nThere is a helper method FBAPI.testResults() which lets you test queries as if calling FBAPI.query() without a callback. \r\nResults (or error messages) are output to the console.\r\n\r\n### Accessing the full Facebook Javascript SDK with promises\r\n\r\nThe official Facebook Javascript SDK is accessible through the global variable \"FB\". \r\nHowever, to take advantage of the promise architecture of FBAPI.js, you can access the SDK \r\nthrough the FBAPI.ready() (or the alias FBAPI.$()) method. This ensures that your call to the API will work, whether or not \r\nthe SDK is loaded yet.\r\n\r\nYou can simply ensure your code gets a reference to \"FB\" before it's loaded by calling the helper method with a callback.\r\n\r\n    FBAPI.ready(function(FB) {  \r\n        //No matter if the global veriable exists yet, this callback will be fired when it's ready  \r\n    });  \r\n\r\nYou can access methods on \"FB\" that will fire when everything's ready.\r\n\r\n    //The first parameter is the method, any additional parameters are passed to the method.  \r\n    //In this case, the FB.login() method will be called, passing \"callback\" and the permissions.  \r\n    FBAPI.ready('login', callback, { scope: permissions });  \r\n    \r\n    //You can access any nested methods on \"FB\", such as FB.Event.subscribe.  \r\n    FBAPI.ready('Event.subscribe', 'auth.statusChange', callback);  \r\n    \r\n    //The namespace can optionally include the \"FB\" prefix. This is equivalent to the above.  \r\n    FBAPI.ready('FB.Event.subscribe', 'auth.statusChange', callback);\r\n\r\n## Copyright\r\n\r\nFBAPI.js was written by [Joel Van Horn](http://twitter.com/joelvh).  You are free to use this library as you please.\r\n\r\nFeel free to get in touch with me through GitHub if you have any questions or suggestions.\r\n\r\nLet me know what you use FBAPI.js for!\r\n\r\n\r\n","tagline":"Facebook Javascript SDK wrapper that adds many helper functions to access the Facebook API more easily","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}